// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, cache, entry, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject.parcelRequire === 'function' &&
    globalObject.parcelRequire;
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {}
    ];
  };

  globalObject.parcelRequire = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"0b2bb1d72fb5fadd8bb9e436fc7dff3d":[function(require,module,exports) {
window.onload = function () {
  clock();

  function clock() {
    var now = new Date();
    var TwentyFourHour = now.getHours();
    var hour = now.getHours();
    var min = now.getMinutes();
    var sec = now.getSeconds();
    var mid = 'PM';

    if (min < 10) {
      min = "0" + min;
    }

    if (hour > 12) {
      hour = hour - 12;
    }

    if (hour == 0) {
      hour = 12;
    }

    if (TwentyFourHour < 12) {
      mid = 'AM';
    }

    document.getElementById('currentTime').innerHTML = hour + ':' + min + ' ' + mid; //setTimeout(clock, 1000);
  }
};

const toggleSwitch = document.querySelector('.theme-switch input[type="checkbox"]');
const currentTheme = localStorage.getItem('theme');

if (currentTheme) {
  document.documentElement.setAttribute('data-theme', currentTheme);

  if (currentTheme === 'dark') {
    toggleSwitch.checked = true;
  }
}

function switchTheme(e) {
  if (e.target.checked) {
    document.documentElement.setAttribute('data-theme', 'dark');
    localStorage.setItem('theme', 'dark');
  } else {
    document.documentElement.setAttribute('data-theme', 'light');
    localStorage.setItem('theme', 'light');
  }
}

toggleSwitch.addEventListener('change', switchTheme, false);
$(window).scroll(function () {
  if ($(this).scrollTop() > 250) {
    $('profile').addClass("smaller");
  } else {
    $('profile').removeClass("smaller");
  }
});
},{}],"13ce80ed9a2051f997528b96cdd8e3d2":[function(require,module,exports) {
var global = arguments[3];
var __PARCEL_HMR_ENV_HASH = "d751713988987e9331980363e24189ce";
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept, acceptedAssets;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "12345" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    acceptedAssets = {};
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      // Remove error overlay if there is one
      removeErrorOverlay();
      let assets = data.assets.filter( // eslint-disable-next-line no-undef
      asset => asset.envHash === __PARCEL_HMR_ENV_HASH); // Handle HMR Update

      var handled = false;
      assets.forEach(asset => {
        var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

        if (didAccept) {
          handled = true;
        }
      });

      if (handled) {
        console.clear();
        assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });

        for (var i = 0; i < assetsToAccept.length; i++) {
          var id = assetsToAccept[i][1];

          if (!acceptedAssets[id]) {
            hmrAcceptRun(assetsToAccept[i][0], id);
          }
        }
      } else {
        window.location.reload();
      }
    }

    if (data.type === 'error') {
      // Log parcel errors to console
      for (let ansiDiagnostic of data.diagnostics.ansi) {
        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
        console.error('ðŸš¨ [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
      } // Render the fancy html overlay


      removeErrorOverlay();
      var overlay = createErrorOverlay(data.diagnostics.html);
      document.body.appendChild(overlay);
    }
  };

  ws.onerror = function (e) {
    console.error(e.message);
  };

  ws.onclose = function (e) {
    console.warn('[parcel] ðŸš¨ Connection to the HMR server was lost');
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
    console.log('[parcel] âœ¨ Error resolved');
  }
}

function createErrorOverlay(diagnostics) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;
  let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';

  for (let diagnostic of diagnostics) {
    let stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
    errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          ðŸš¨ ${diagnostic.message}
        </div>
        <pre>
          ${stack}
        </pre>
        <div>
          ${diagnostic.hints.map(hint => '<div>' + hint + '</div>').join('')}
        </div>
      </div>
    `;
  }

  errorHTML += '</div>';
  overlay.innerHTML = errorHTML;
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push([bundle, k]);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.output);
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (v) {
    return hmrAcceptCheck(v[0], v[1]);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached && cached.hot) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      var assetsToAlsoAccept = cb(function () {
        return getParents(global.parcelRequire, id);
      });

      if (assetsToAlsoAccept && assetsToAccept.length) {
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
      }
    });
  }

  acceptedAssets[id] = true;
}
},{}]},{},["13ce80ed9a2051f997528b96cdd8e3d2","0b2bb1d72fb5fadd8bb9e436fc7dff3d"], null)

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4Lmh0bWwiLCJub2RlX21vZHVsZXMvQHBhcmNlbC9ydW50aW1lLWJyb3dzZXItaG1yL2xpYi9ITVJSdW50aW1lLmpzIl0sIm5hbWVzIjpbIndpbmRvdyIsIm9ubG9hZCIsImNsb2NrIiwibm93IiwiRGF0ZSIsIlR3ZW50eUZvdXJIb3VyIiwiZ2V0SG91cnMiLCJob3VyIiwibWluIiwiZ2V0TWludXRlcyIsInNlYyIsImdldFNlY29uZHMiLCJtaWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwidG9nZ2xlU3dpdGNoIiwicXVlcnlTZWxlY3RvciIsImN1cnJlbnRUaGVtZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJkb2N1bWVudEVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJjaGVja2VkIiwic3dpdGNoVGhlbWUiLCJlIiwidGFyZ2V0Iiwic2V0SXRlbSIsImFkZEV2ZW50TGlzdGVuZXIiLCIkIiwic2Nyb2xsIiwic2Nyb2xsVG9wIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsIl9fUEFSQ0VMX0hNUl9FTlZfSEFTSCIsIk9WRVJMQVlfSUQiLCJPbGRNb2R1bGUiLCJtb2R1bGUiLCJidW5kbGUiLCJNb2R1bGUiLCJtb2R1bGVOYW1lIiwiY2FsbCIsImhvdCIsImRhdGEiLCJob3REYXRhIiwiX2FjY2VwdENhbGxiYWNrcyIsIl9kaXNwb3NlQ2FsbGJhY2tzIiwiYWNjZXB0IiwiZm4iLCJwdXNoIiwiZGlzcG9zZSIsImNoZWNrZWRBc3NldHMiLCJhc3NldHNUb0FjY2VwdCIsImFjY2VwdGVkQXNzZXRzIiwicGFyZW50IiwiaXNQYXJjZWxSZXF1aXJlIiwiV2ViU29ja2V0IiwiaG9zdG5hbWUiLCJsb2NhdGlvbiIsInByb3RvY29sIiwid3MiLCJvbm1lc3NhZ2UiLCJldmVudCIsIkpTT04iLCJwYXJzZSIsInR5cGUiLCJyZW1vdmVFcnJvck92ZXJsYXkiLCJhc3NldHMiLCJmaWx0ZXIiLCJhc3NldCIsImVudkhhc2giLCJoYW5kbGVkIiwiZm9yRWFjaCIsImRpZEFjY2VwdCIsImhtckFjY2VwdENoZWNrIiwiZ2xvYmFsIiwicGFyY2VsUmVxdWlyZSIsImlkIiwiY29uc29sZSIsImNsZWFyIiwiaG1yQXBwbHkiLCJpIiwibGVuZ3RoIiwiaG1yQWNjZXB0UnVuIiwicmVsb2FkIiwiYW5zaURpYWdub3N0aWMiLCJkaWFnbm9zdGljcyIsImFuc2kiLCJzdGFjayIsImNvZGVmcmFtZSIsImVycm9yIiwibWVzc2FnZSIsImhpbnRzIiwiam9pbiIsIm92ZXJsYXkiLCJjcmVhdGVFcnJvck92ZXJsYXkiLCJodG1sIiwiYm9keSIsImFwcGVuZENoaWxkIiwib25lcnJvciIsIm9uY2xvc2UiLCJ3YXJuIiwicmVtb3ZlIiwibG9nIiwiY3JlYXRlRWxlbWVudCIsImVycm9ySFRNTCIsImRpYWdub3N0aWMiLCJtYXAiLCJoaW50IiwiZ2V0UGFyZW50cyIsIm1vZHVsZXMiLCJwYXJlbnRzIiwiayIsImQiLCJkZXAiLCJBcnJheSIsImlzQXJyYXkiLCJjb25jYXQiLCJGdW5jdGlvbiIsIm91dHB1dCIsImRlcHMiLCJjYWNoZWQiLCJjYWNoZSIsInNvbWUiLCJ2IiwiY2IiLCJhc3NldHNUb0Fsc29BY2NlcHQiLCJhcHBseSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsTUFBTSxDQUFDQyxNQUFQLEdBQWdCLFlBQVc7QUFDbkJDLEVBQUFBLEtBQUs7O0FBQ0gsV0FBU0EsS0FBVCxHQUFpQjtBQUNqQixRQUFJQyxHQUFHLEdBQUcsSUFBSUMsSUFBSixFQUFWO0FBQ0EsUUFBSUMsY0FBYyxHQUFHRixHQUFHLENBQUNHLFFBQUosRUFBckI7QUFDQSxRQUFJQyxJQUFJLEdBQUdKLEdBQUcsQ0FBQ0csUUFBSixFQUFY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RCxDQUFGLEVBQU9BLENBQUMsQ0FBQyxDQUFELENBQVIsQ0FBckI7QUFDRCxHQUZNLENBQVA7QUFHRDs7QUFFRCxTQUFTekMsWUFBVCxDQUFzQjdDLE1BQXRCLEVBQThCdUMsRUFBOUIsRUFBa0M7QUFDaEMsTUFBSTRDLE1BQU0sR0FBR25GLE1BQU0sQ0FBQ29GLEtBQVAsQ0FBYTdDLEVBQWIsQ0FBYjtBQUNBdkMsRUFBQUEsTUFBTSxDQUFDTSxPQUFQLEdBQWlCLEVBQWpCOztBQUNBLE1BQUk2RSxNQUFNLElBQUlBLE1BQU0sQ0FBQy9FLEdBQXJCLEVBQTBCO0FBQ3hCK0UsSUFBQUEsTUFBTSxDQUFDL0UsR0FBUCxDQUFXQyxJQUFYLEdBQWtCTCxNQUFNLENBQUNNLE9BQXpCO0FBQ0Q7O0FBRUQsTUFBSTZFLE1BQU0sSUFBSUEsTUFBTSxDQUFDL0UsR0FBakIsSUFBd0IrRSxNQUFNLENBQUMvRSxHQUFQLENBQVdJLGlCQUFYLENBQTZCb0MsTUFBekQsRUFBaUU7QUFDL0R1QyxJQUFBQSxNQUFNLENBQUMvRSxHQUFQLENBQVdJLGlCQUFYLENBQTZCMEIsT0FBN0IsQ0FBcUMsVUFBU3FELEVBQVQsRUFBYTtBQUNoREEsTUFBQUEsRUFBRSxDQUFDdkYsTUFBTSxDQUFDTSxPQUFSLENBQUY7QUFDRCxLQUZEO0FBR0Q7O0FBRUQsU0FBT04sTUFBTSxDQUFDb0YsS0FBUCxDQUFhN0MsRUFBYixDQUFQO0FBQ0F2QyxFQUFBQSxNQUFNLENBQUN1QyxFQUFELENBQU47QUFFQTRDLEVBQUFBLE1BQU0sR0FBR25GLE1BQU0sQ0FBQ29GLEtBQVAsQ0FBYTdDLEVBQWIsQ0FBVDs7QUFDQSxNQUFJNEMsTUFBTSxJQUFJQSxNQUFNLENBQUMvRSxHQUFqQixJQUF3QitFLE1BQU0sQ0FBQy9FLEdBQVAsQ0FBV0csZ0JBQVgsQ0FBNEJxQyxNQUF4RCxFQUFnRTtBQUM5RHVDLElBQUFBLE1BQU0sQ0FBQy9FLEdBQVAsQ0FBV0csZ0JBQVgsQ0FBNEIyQixPQUE1QixDQUFvQyxVQUFTcUQsRUFBVCxFQUFhO0FBQy9DLFVBQUlDLGtCQUFrQixHQUFHRCxFQUFFLENBQUMsWUFBVztBQUNyQyxlQUFPaEIsVUFBVSxDQUFDbEMsTUFBTSxDQUFDQyxhQUFSLEVBQXVCQyxFQUF2QixDQUFqQjtBQUNELE9BRjBCLENBQTNCOztBQUdBLFVBQUlpRCxrQkFBa0IsSUFBSTFFLGNBQWMsQ0FBQzhCLE1BQXpDLEVBQWlEO0FBQy9DOUIsUUFBQUEsY0FBYyxDQUFDSCxJQUFmLENBQW9COEUsS0FBcEIsQ0FBMEIzRSxjQUExQixFQUEwQzBFLGtCQUExQztBQUNEO0FBQ0YsS0FQRDtBQVFEOztBQUNEekUsRUFBQUEsY0FBYyxDQUFDd0IsRUFBRCxDQUFkLEdBQXFCLElBQXJCO0FBQ0QiLCJmaWxlIjoiaW5kZXguMzhjYTc5YmQuanMubWFwIiwic291cmNlUm9vdCI6Ii9fX3BhcmNlbF9zb3VyY2Vfcm9vdC8ifQ==
